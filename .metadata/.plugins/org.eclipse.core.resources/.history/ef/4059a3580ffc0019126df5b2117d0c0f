package user;

import com.grpcproject.User.APIResponse;
import com.grpcproject.User.LoginRequest;
import com.grpcproject.userGrpc.userImplBase;
import grpcEncryption.Encryption;
import grpcEncryption.GrpcServer;
import io.grpc.stub.StreamObserver;

public class UserService extends userImplBase {

	@Override
	public void login(LoginRequest request, StreamObserver<APIResponse> responseObserver) {

		// client username and password
		String username = request.getUsername();
		String password = request.getPassword();

		APIResponse.Builder response = APIResponse.newBuilder();
		APIResponse.Builder valRes = APIResponse.newBuilder();
		if (username.equals(password)) {

			String salted = Encryption.salt(password);
			String Salt_hashed = Encryption.hash(salted);
			System.out.println("\n" + salted);
			System.out.println("salted password hashed = " + Encryption.hash(salted));

			System.out.println("\nClients username unhashed = " + username);// client username
			System.out.println("hashed client username = " + Encryption.hash(username));// hashing clients username

			System.out.println("\nClients password unsalted = " + password);// client password
			System.out.println("salted client password = " + Encryption.salt(password));// salting client password
			response.setResponseCode(0).setResponsemessage("login successful ");// sending to client login successfull

			if (password.equals(password) && Salt_hashed.equals(Salt_hashed)) {
				valRes.setResponseCode(1).setResponsemessage("True");
			} else {
				valRes.setResponseCode(1).setResponsemessage("False");

			}
			
		} else {
			// login unsucessfull return message
			System.out.println(username);// client username
			System.out.println(password);// client password
			response.setResponseCode(100).setResponsemessage("unsuccessfull login\npassword valid = True");// sending to
																											// client
																											// login not
			// successfull
		}

		responseObserver.onNext(response.build());
		responseObserver.onCompleted();
	}
}
